{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GImage \u00b6 A PHP library for easy image handling. Introduction \u00b6 GImage is a simple and small library based on PHP Image Processing and GD for processing images without stress. \"A presentation card built with GImage\" - View code example Features \u00b6 Load an image from a local path, URL or image resource. Create shapes such as rectangles or ellipses with opacity. Resize, scale or crop images proportionally. Rotate images, shapes or texts. Embed text with custom TTF fonts. Compose a pool of images with Canvas . Swap image formats such as JPEG, PNG or GIF. Save images locally or output them on the browser. Save several copies of the same image. Render an image in memory and return its resource. For detailed instructions see the getting started guide .","title":"Introduction"},{"location":"#gimage","text":"A PHP library for easy image handling.","title":"GImage"},{"location":"#introduction","text":"GImage is a simple and small library based on PHP Image Processing and GD for processing images without stress. \"A presentation card built with GImage\" - View code example","title":"Introduction"},{"location":"#features","text":"Load an image from a local path, URL or image resource. Create shapes such as rectangles or ellipses with opacity. Resize, scale or crop images proportionally. Rotate images, shapes or texts. Embed text with custom TTF fonts. Compose a pool of images with Canvas . Swap image formats such as JPEG, PNG or GIF. Save images locally or output them on the browser. Save several copies of the same image. Render an image in memory and return its resource. For detailed instructions see the getting started guide .","title":"Features"},{"location":"api/","text":"API Documentation \u00b6 v3.0 \u00b6 View documentation","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#v30","text":"View documentation","title":"v3.0"},{"location":"build-documentation/","text":"Building documentation from source \u00b6 All HTML documentation is located in the docs/ project's directory and is built using Material for MkDocs . It's only necessary to have Docker installed. Building documentation \u00b6 By default the docs will be built in the /tmp/docs directory, to do so follow these steps. git clone https://github.com/joseluisq/gimage.git cd gimage mkdir /tmp/docs docker run -it --rm \\ -v $PWD /docs:/docs \\ -v /tmp/docs:/tmp/docs squidfunk/mkdocs-material build Output the docs in a different directory If you want to output the docs in a different directory then append the --site-dir=/new/dir/path/ argument to the \"squidfunk/mkdocs-material\" build command and make sure to provide the new directory path. Development server \u00b6 If you want to improve the documentation then run the built-in development server via docs/docker-compose.yml . git clone https://github.com/joseluisq/gimage.git cd gimage docker-compose -f docs/docker-compose.yml up Now the server will be available at localhost:8000","title":"Build documentation"},{"location":"build-documentation/#building-documentation-from-source","text":"All HTML documentation is located in the docs/ project's directory and is built using Material for MkDocs . It's only necessary to have Docker installed.","title":"Building documentation from source"},{"location":"build-documentation/#building-documentation","text":"By default the docs will be built in the /tmp/docs directory, to do so follow these steps. git clone https://github.com/joseluisq/gimage.git cd gimage mkdir /tmp/docs docker run -it --rm \\ -v $PWD /docs:/docs \\ -v /tmp/docs:/tmp/docs squidfunk/mkdocs-material build Output the docs in a different directory If you want to output the docs in a different directory then append the --site-dir=/new/dir/path/ argument to the \"squidfunk/mkdocs-material\" build command and make sure to provide the new directory path.","title":"Building documentation"},{"location":"build-documentation/#development-server","text":"If you want to improve the documentation then run the built-in development server via docs/docker-compose.yml . git clone https://github.com/joseluisq/gimage.git cd gimage docker-compose -f docs/docker-compose.yml up Now the server will be available at localhost:8000","title":"Development server"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Requirements GImage requires PHP 7.4 or a recent PHP version with the latest GD Extension . Make sure that GD extension is loaded on your system. You can verify it using the following command: php -r \"var_dump(extension_loaded('gd'));\" # bool(true) Then install GImage via Composer : composer require joseluisq/gimage Usage \u00b6 Loading an external PNG image and saving it as JPG: <?php use GImage\\Image ; // PNG image (600x199) $url = 'https://i.imgur.com/G5MR088.png' ; $arch = new Image (); $arch // Load from URL -> load ( $url ) // Scale to 50% (300x99) -> scale ( 0.5 ) // Change the format to JPG -> toJPG () // Saving in local path -> save ( 'arch.jpg' );","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Requirements GImage requires PHP 7.4 or a recent PHP version with the latest GD Extension . Make sure that GD extension is loaded on your system. You can verify it using the following command: php -r \"var_dump(extension_loaded('gd'));\" # bool(true) Then install GImage via Composer : composer require joseluisq/gimage","title":"Installation"},{"location":"getting-started/#usage","text":"Loading an external PNG image and saving it as JPG: <?php use GImage\\Image ; // PNG image (600x199) $url = 'https://i.imgur.com/G5MR088.png' ; $arch = new Image (); $arch // Load from URL -> load ( $url ) // Scale to 50% (300x99) -> scale ( 0.5 ) // Change the format to JPG -> toJPG () // Saving in local path -> save ( 'arch.jpg' );","title":"Usage"},{"location":"classes/canvas/","text":"Canvas \u00b6 Canvas represents an area on which it can append images, text and figures. Note Canvas needs a Figure or Image which will be used as base element (layout). The following example uses append() method to attach elements to Canvas . Tip Using setLeft() or setTop() methods it can control the position (x,y) of the elements ( Figure , Image or Text ) on Canvas . <?php use GImage\\Image ; use GImage\\Figure ; use GImage\\Canvas ; $image = new Image (); $image -> load ( 'https://my_website.com/images/my_image.png' ) $ellipse = new Figure ( 200 , 200 ); $ellipse -> isEllipse () -> setBackgroundColor ( 200 , 0 , 0 ) -> setTop ( 60 ) -> setLeft ( 70 ) -> create () // Used as layout $layout = new Figure ( 200 , 200 ); $layout -> setBackgroundColor ( 0 , 0 , 255 ) -> create () $canvas = new Canvas ( $layout ); $canvas -> append ([ $image , $ellipse ]) -> toPNG () -> draw () -> save ( '/home/my_user/images/my_composed_image.png' );","title":"Canvas"},{"location":"classes/canvas/#canvas","text":"Canvas represents an area on which it can append images, text and figures. Note Canvas needs a Figure or Image which will be used as base element (layout). The following example uses append() method to attach elements to Canvas . Tip Using setLeft() or setTop() methods it can control the position (x,y) of the elements ( Figure , Image or Text ) on Canvas . <?php use GImage\\Image ; use GImage\\Figure ; use GImage\\Canvas ; $image = new Image (); $image -> load ( 'https://my_website.com/images/my_image.png' ) $ellipse = new Figure ( 200 , 200 ); $ellipse -> isEllipse () -> setBackgroundColor ( 200 , 0 , 0 ) -> setTop ( 60 ) -> setLeft ( 70 ) -> create () // Used as layout $layout = new Figure ( 200 , 200 ); $layout -> setBackgroundColor ( 0 , 0 , 255 ) -> create () $canvas = new Canvas ( $layout ); $canvas -> append ([ $image , $ellipse ]) -> toPNG () -> draw () -> save ( '/home/my_user/images/my_composed_image.png' );","title":"Canvas"},{"location":"classes/figure/","text":"Figure \u00b6 Figure class allows to create rectangles or ellipses shapes. The following example creates a rectangle, set opacity to 75% and save it as PNG: <?php use GImage\\Figure ; $rectangle = new Figure ( 400 , 250 ); $rectangle // Figures are rectangles by default // ->isRectangle() -> setBackgroundColor ( 0 , 0 , 255 ) -> setOpacity ( 0.75 ) -> create () -> save ( '/home/my_user/images/reactangle.png' ); As above example, we can also create an ellipse: <?php use GImage\\Figure ; $ellipse = new Figure ( 300 , 300 ); $ellipse // Figure as an Elipse -> isEllipse () -> setBackgroundColor ( 255 , 0 , 0 ) -> setOpacity ( 0.5 ) -> create () -> save ( '/home/my_user/images/ellipse.png' );","title":"Figure"},{"location":"classes/figure/#figure","text":"Figure class allows to create rectangles or ellipses shapes. The following example creates a rectangle, set opacity to 75% and save it as PNG: <?php use GImage\\Figure ; $rectangle = new Figure ( 400 , 250 ); $rectangle // Figures are rectangles by default // ->isRectangle() -> setBackgroundColor ( 0 , 0 , 255 ) -> setOpacity ( 0.75 ) -> create () -> save ( '/home/my_user/images/reactangle.png' ); As above example, we can also create an ellipse: <?php use GImage\\Figure ; $ellipse = new Figure ( 300 , 300 ); $ellipse // Figure as an Elipse -> isEllipse () -> setBackgroundColor ( 255 , 0 , 0 ) -> setOpacity ( 0.5 ) -> create () -> save ( '/home/my_user/images/ellipse.png' );","title":"Figure"},{"location":"classes/image/","text":"Image \u00b6 Image class is the parent class for Figure and Canvas classes. So Figure and Canvas be able to access to save() , crop() , output() and other methods provided by Image . Saving \u00b6 The example below loads and external imagen and save it on local. Tip load(f) function can load an image file from any url or local valid path. <?php use GImage\\Image ; $img = new Image (); $img -> load ( 'https://i.imgur.com/G5MR088.png' ) -> scale ( 0.5 ) -> save ( '/home/my_user/images/myimage.png' ); Output \u00b6 Loading an image from local path, scale (50%) and output it on the browser. <?php use GImage\\Image ; $img = new Image (); $img -> load ( '/home/my_user/images/my_image.png' ) -> scale ( 0.5 ) -> output (); Preserve resource \u00b6 save() and output() functions remove the image resource in memory after processing. To preserve the image resource for future processings only call preserve() function before saving or outputing, then preserve(false) when your processing have been completed. <?php use GImage\\Image ; $img = new Image (); $img -> load ( '/home/my_user/images/my_image.png' ) -> centerCrop ( 50 , 50 ) // preserve the resource before save -> preserve (); // save only -> save (); // remove the resource after output -> preserve ( false ); // output and remove the resource -> output (); Reuse Image functions \u00b6 Figure and Canvas extend from Image . This means that it's possible to use many inherited functions like save() , crop() , rotate() and so on. For example the code below creates an rectangle, set an opacity to 75% and save it as PNG. <?php use GImage\\Figure ; $figure = new Figure ( 400 , 250 ); $figure -> setBackgroundColor ( 0 , 0 , 255 ) -> setOpacity ( 0.75 ) -> create () -> save ( '/home/my_user/images/reactangle.png' );","title":"Image"},{"location":"classes/image/#image","text":"Image class is the parent class for Figure and Canvas classes. So Figure and Canvas be able to access to save() , crop() , output() and other methods provided by Image .","title":"Image"},{"location":"classes/image/#saving","text":"The example below loads and external imagen and save it on local. Tip load(f) function can load an image file from any url or local valid path. <?php use GImage\\Image ; $img = new Image (); $img -> load ( 'https://i.imgur.com/G5MR088.png' ) -> scale ( 0.5 ) -> save ( '/home/my_user/images/myimage.png' );","title":"Saving"},{"location":"classes/image/#output","text":"Loading an image from local path, scale (50%) and output it on the browser. <?php use GImage\\Image ; $img = new Image (); $img -> load ( '/home/my_user/images/my_image.png' ) -> scale ( 0.5 ) -> output ();","title":"Output"},{"location":"classes/image/#preserve-resource","text":"save() and output() functions remove the image resource in memory after processing. To preserve the image resource for future processings only call preserve() function before saving or outputing, then preserve(false) when your processing have been completed. <?php use GImage\\Image ; $img = new Image (); $img -> load ( '/home/my_user/images/my_image.png' ) -> centerCrop ( 50 , 50 ) // preserve the resource before save -> preserve (); // save only -> save (); // remove the resource after output -> preserve ( false ); // output and remove the resource -> output ();","title":"Preserve resource"},{"location":"classes/image/#reuse-image-functions","text":"Figure and Canvas extend from Image . This means that it's possible to use many inherited functions like save() , crop() , rotate() and so on. For example the code below creates an rectangle, set an opacity to 75% and save it as PNG. <?php use GImage\\Figure ; $figure = new Figure ( 400 , 250 ); $figure -> setBackgroundColor ( 0 , 0 , 255 ) -> setOpacity ( 0.75 ) -> create () -> save ( '/home/my_user/images/reactangle.png' );","title":"Reuse Image functions"},{"location":"classes/text/","text":"Text \u00b6 Text class allows to use text to be embedded into Canvas . Example below creates a text with opacity using a custom TTF font: Tip Using setWidth() or setHeight() methods we can control the width and height of the text on canvas. <?php $text = new Text ( 'My ustom text with opacity!' ); $text -> setWidth ( 400 ) -> setHeight ( 250 ) -> setTop ( 50 ) -> setLeft ( 50 ) -> setSize ( 22 ) -> setOpacity ( 0.5 ) -> setColor ( 255 , 255 , 255 ) -> setFontface ( '/home/my_user/fonts/Lato.ttf' ); // Used as layout $layout = new Figure ( 350 , 180 ); $layout -> setBackgroundColor ( 300 , 300 , 300 ) -> create (); $canvas = new Canvas ( $layout ); $canvas -> append ( $text ) -> toPNG () -> draw () -> save ( '/home/my_user/images/my_text.png' );","title":"Text"},{"location":"classes/text/#text","text":"Text class allows to use text to be embedded into Canvas . Example below creates a text with opacity using a custom TTF font: Tip Using setWidth() or setHeight() methods we can control the width and height of the text on canvas. <?php $text = new Text ( 'My ustom text with opacity!' ); $text -> setWidth ( 400 ) -> setHeight ( 250 ) -> setTop ( 50 ) -> setLeft ( 50 ) -> setSize ( 22 ) -> setOpacity ( 0.5 ) -> setColor ( 255 , 255 , 255 ) -> setFontface ( '/home/my_user/fonts/Lato.ttf' ); // Used as layout $layout = new Figure ( 350 , 180 ); $layout -> setBackgroundColor ( 300 , 300 , 300 ) -> create (); $canvas = new Canvas ( $layout ); $canvas -> append ( $text ) -> toPNG () -> draw () -> save ( '/home/my_user/images/my_text.png' );","title":"Text"},{"location":"examples/composing-with-canvas/","text":"Composing with canvas \u00b6 Canvas class is useful to composing several elements like images, text and figures. Tip Canvas append(arr) function also supports an array of elements. <?php use GImage\\Text ; use GImage\\Image ; use GImage\\Figure ; use GImage\\Canvas ; $img1 = new Image (); $img1 -> load ( 'https://i.imgur.com/G5MR088.png' ) -> scale ( 0.5 ); $figure1 = new Figure ( 300 , 150 ); $figure1 -> setBackgroundColor ( 10 , 20 , 30 ) -> create (); $text1 = new Text ( 'My awesome text!' ); $text1 -> setSize ( 18 ) -> setColor ( 255 , 255 , 255 ) -> setFontface ( '/my/path/fonts/times.ttf' ); // used as canvas layout $figure0 = new Figure ( 400 , 250 ); $figure0 -> setBackgroundColor ( 50 , 20 , 30 ) -> create (); $canvas = new Canvas ( $figure0 ); $canvas // append every element -> append ( $figure1 ) -> append ( $img1 ) -> append ( $text1 ) // as PNG format -> toPNG () // draw the canvas with all elements -> draw () -> save ( 'text.png' ); For more details check out the presentation card example.","title":"Composing with canvas"},{"location":"examples/composing-with-canvas/#composing-with-canvas","text":"Canvas class is useful to composing several elements like images, text and figures. Tip Canvas append(arr) function also supports an array of elements. <?php use GImage\\Text ; use GImage\\Image ; use GImage\\Figure ; use GImage\\Canvas ; $img1 = new Image (); $img1 -> load ( 'https://i.imgur.com/G5MR088.png' ) -> scale ( 0.5 ); $figure1 = new Figure ( 300 , 150 ); $figure1 -> setBackgroundColor ( 10 , 20 , 30 ) -> create (); $text1 = new Text ( 'My awesome text!' ); $text1 -> setSize ( 18 ) -> setColor ( 255 , 255 , 255 ) -> setFontface ( '/my/path/fonts/times.ttf' ); // used as canvas layout $figure0 = new Figure ( 400 , 250 ); $figure0 -> setBackgroundColor ( 50 , 20 , 30 ) -> create (); $canvas = new Canvas ( $figure0 ); $canvas // append every element -> append ( $figure1 ) -> append ( $img1 ) -> append ( $text1 ) // as PNG format -> toPNG () // draw the canvas with all elements -> draw () -> save ( 'text.png' ); For more details check out the presentation card example.","title":"Composing with canvas"},{"location":"examples/creating-a-presentation-card/","text":"Creating a presentation card \u00b6 Example below makes a simple presentation card using Image , Text , Figure and Canvas . <?php use GImage\\Image ; use GImage\\Text ; use GImage\\Figure ; use GImage\\Canvas ; // Creating an avatar image $avatar_image = new Image (); $avatar_image -> load ( 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' ) -> centerCrop ( 100 , 100 ) -> setTop ( 60 ) -> setLeft ( 70 ); $about_text = new Text ( \"MY AWESOME PRESENTATION CARD \\n ~ BY GIMAGE ~\" ); $about_text -> setSize ( 16 ) -> setWidth ( 300 ) -> setLeft ( 210 ) -> setLineHeight ( 1.5 ) -> setTop ( 75 ) -> setColor ( 204 , 164 , 116 ) -> setFontface ( 'fonts/Lato-Light.ttf' ); $twitter_text = new Text ( '@joseluisq/gimage' ); $twitter_text -> setSize ( 11 ) -> setWidth ( 70 ) -> setLeft ( 410 ) -> setTop ( 210 ) -> setColor ( 130 , 127 , 125 ) -> setFontface ( 'fonts/Lato-Regular.ttf' ); $canvas_figure = new Figure ( 550 , 250 ); $canvas_figure -> setBackgroundColor ( 47 , 42 , 39 ) -> create (); $avatar_box = new Figure ( $avatar_image -> getWidth () + 16 , $avatar_image -> getHeight () + 17 ); $avatar_box -> setBackgroundColor ( 63 , 56 , 52 ) -> setLeft ( $avatar_image -> getLeft () - 7 ) -> setTop ( $avatar_image -> getTop () - 8 ) -> create (); $avatar_box2 = new Figure ( $avatar_image -> getWidth () + 3 , $avatar_image -> getHeight () + 19 ); $avatar_box2 -> setBackgroundColor ( 79 , 72 , 67 ) -> setLeft ( $avatar_image -> getLeft () + 7 ) -> setTop ( $avatar_image -> getTop () - 9 ) -> create (); $avatar_box3 = new Figure ( 120 , 240 ); $avatar_box3 -> setBackgroundColor ( 63 , 56 , 52 ) -> create (); $line_vertical = new Figure ( 600 , 10 ); $line_vertical -> setBackgroundColor ( 119 , 99 , 77 ) -> setTop ( 240 ) -> create (); $line_horizontal = new Figure ( 1 , 240 ); $line_horizontal -> setBackgroundColor ( 79 , 72 , 67 ) -> setLeft ( 120 ) -> create (); $canvas = new Canvas ( $canvas_figure ); $canvas -> append ([ $line_horizontal , $avatar_box2 , $avatar_box3 , $avatar_box , $avatar_image , $about_text , $twitter_text , $line_vertical , ]) -> toPNG () -> draw () -> save ( 'card.png' );","title":"Creating a presentation card"},{"location":"examples/creating-a-presentation-card/#creating-a-presentation-card","text":"Example below makes a simple presentation card using Image , Text , Figure and Canvas . <?php use GImage\\Image ; use GImage\\Text ; use GImage\\Figure ; use GImage\\Canvas ; // Creating an avatar image $avatar_image = new Image (); $avatar_image -> load ( 'https://assets-cdn.github.com/images/modules/logos_page/Octocat.png' ) -> centerCrop ( 100 , 100 ) -> setTop ( 60 ) -> setLeft ( 70 ); $about_text = new Text ( \"MY AWESOME PRESENTATION CARD \\n ~ BY GIMAGE ~\" ); $about_text -> setSize ( 16 ) -> setWidth ( 300 ) -> setLeft ( 210 ) -> setLineHeight ( 1.5 ) -> setTop ( 75 ) -> setColor ( 204 , 164 , 116 ) -> setFontface ( 'fonts/Lato-Light.ttf' ); $twitter_text = new Text ( '@joseluisq/gimage' ); $twitter_text -> setSize ( 11 ) -> setWidth ( 70 ) -> setLeft ( 410 ) -> setTop ( 210 ) -> setColor ( 130 , 127 , 125 ) -> setFontface ( 'fonts/Lato-Regular.ttf' ); $canvas_figure = new Figure ( 550 , 250 ); $canvas_figure -> setBackgroundColor ( 47 , 42 , 39 ) -> create (); $avatar_box = new Figure ( $avatar_image -> getWidth () + 16 , $avatar_image -> getHeight () + 17 ); $avatar_box -> setBackgroundColor ( 63 , 56 , 52 ) -> setLeft ( $avatar_image -> getLeft () - 7 ) -> setTop ( $avatar_image -> getTop () - 8 ) -> create (); $avatar_box2 = new Figure ( $avatar_image -> getWidth () + 3 , $avatar_image -> getHeight () + 19 ); $avatar_box2 -> setBackgroundColor ( 79 , 72 , 67 ) -> setLeft ( $avatar_image -> getLeft () + 7 ) -> setTop ( $avatar_image -> getTop () - 9 ) -> create (); $avatar_box3 = new Figure ( 120 , 240 ); $avatar_box3 -> setBackgroundColor ( 63 , 56 , 52 ) -> create (); $line_vertical = new Figure ( 600 , 10 ); $line_vertical -> setBackgroundColor ( 119 , 99 , 77 ) -> setTop ( 240 ) -> create (); $line_horizontal = new Figure ( 1 , 240 ); $line_horizontal -> setBackgroundColor ( 79 , 72 , 67 ) -> setLeft ( 120 ) -> create (); $canvas = new Canvas ( $canvas_figure ); $canvas -> append ([ $line_horizontal , $avatar_box2 , $avatar_box3 , $avatar_box , $avatar_image , $about_text , $twitter_text , $line_vertical , ]) -> toPNG () -> draw () -> save ( 'card.png' );","title":"Creating a presentation card"},{"location":"examples/creating-figures/","text":"Creating figures \u00b6 The Figure class supports two kind of figures like rectangles and ellipses. Note A figure is a rectangle by default. Rectangle \u00b6 <?php use GImage\\Figure ; $figure = new Figure ( 350 , 200 ); $figure // ->isRectangle() -> setBackgroundColor ( 255 , 0 , 0 ) -> create () -> save ( 'rectangle.png' ); Ellipse \u00b6 <?php use GImage\\Figure ; $figure = new Figure ( 200 , 200 ); $figure -> isEllipse () -> setBackgroundColor ( 0 , 255 , 255 ) -> setOpacity ( 0.5 ) -> create () -> save ( 'ellipse.png' );","title":"Creating figures"},{"location":"examples/creating-figures/#creating-figures","text":"The Figure class supports two kind of figures like rectangles and ellipses. Note A figure is a rectangle by default.","title":"Creating figures"},{"location":"examples/creating-figures/#rectangle","text":"<?php use GImage\\Figure ; $figure = new Figure ( 350 , 200 ); $figure // ->isRectangle() -> setBackgroundColor ( 255 , 0 , 0 ) -> create () -> save ( 'rectangle.png' );","title":"Rectangle"},{"location":"examples/creating-figures/#ellipse","text":"<?php use GImage\\Figure ; $figure = new Figure ( 200 , 200 ); $figure -> isEllipse () -> setBackgroundColor ( 0 , 255 , 255 ) -> setOpacity ( 0.5 ) -> create () -> save ( 'ellipse.png' );","title":"Ellipse"},{"location":"examples/cropping/","text":"Cropping \u00b6 Custom cropping \u00b6 The following example loads an image ( 600x199 ) and crops part of the image ( 200x100 ). Tip crop(w, h, x, y) is useful when we needs a custom cropping. we can specify the size and x , y coords. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) // w=200px, h=100px, x=10, y=20 -> crop ( 200 , 100 , 10 , 20 ) // save the resource -> save ( 'crop.png' ); Center cropping \u00b6 We can also make an automatic-size cropping. The example crops an image proportionally based on given values (width and height). Tip centerCrop(w, h) calculates the image size, resize and crop it proportionally and centered. Making the cropping contain most of the original image. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) // crop (80px x 80px) -> centerCrop ( 80 , 80 ) // save the resource -> save ( 'center_crop.png' );","title":"Cropping"},{"location":"examples/cropping/#cropping","text":"","title":"Cropping"},{"location":"examples/cropping/#custom-cropping","text":"The following example loads an image ( 600x199 ) and crops part of the image ( 200x100 ). Tip crop(w, h, x, y) is useful when we needs a custom cropping. we can specify the size and x , y coords. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) // w=200px, h=100px, x=10, y=20 -> crop ( 200 , 100 , 10 , 20 ) // save the resource -> save ( 'crop.png' );","title":"Custom cropping"},{"location":"examples/cropping/#center-cropping","text":"We can also make an automatic-size cropping. The example crops an image proportionally based on given values (width and height). Tip centerCrop(w, h) calculates the image size, resize and crop it proportionally and centered. Making the cropping contain most of the original image. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) // crop (80px x 80px) -> centerCrop ( 80 , 80 ) // save the resource -> save ( 'center_crop.png' );","title":"Center cropping"},{"location":"examples/image-resource-loading/","text":"Image resource loading \u00b6 The following example loads an image resource using the load($src) method. <?php use GImage\\Image ; // Create a image rectangle (240x100) $width = 240 ; $height = 100 ; $rectangle = imagecreatetruecolor ( $width , $height ); $green = imagecolorallocate ( $rectangle , 0 , 255 , 0 ); imagefilledrectangle ( $rectangle , 0 , 0 , $width , $height , $green ); // Load and process the rectangle image resource $img = new Image (); $img -> load ( $rectangle ) // scale to 50% -> scale ( 0.5 ) -> toPNG () -> save ( 'rectangle.png' );","title":"Image resource loading"},{"location":"examples/image-resource-loading/#image-resource-loading","text":"The following example loads an image resource using the load($src) method. <?php use GImage\\Image ; // Create a image rectangle (240x100) $width = 240 ; $height = 100 ; $rectangle = imagecreatetruecolor ( $width , $height ); $green = imagecolorallocate ( $rectangle , 0 , 255 , 0 ); imagefilledrectangle ( $rectangle , 0 , 0 , $width , $height , $green ); // Load and process the rectangle image resource $img = new Image (); $img -> load ( $rectangle ) // scale to 50% -> scale ( 0.5 ) -> toPNG () -> save ( 'rectangle.png' );","title":"Image resource loading"},{"location":"examples/render-images-in-memory/","text":"Render images in-memory \u00b6 The following example renders an image in-memory and return the string resource. <?php use GImage\\Image ; $img = new Image (); $arch_url = 'https://i.imgur.com/G5MR088.png' ; $resource = $img -> load ( $arch_url ) // Scale 120% -> scale ( 1.2 ) // Rotate an image to -90\u00ba -> rotate ( - 90 ) // Change to PNG -> toPNG () // Add opacity 70% -> setOpacity ( 0.7 ) // Render the image in-memory -> render (); // Output the resource (example only) header ( 'Content-Type: image/png' ); // Necessary for opacity to work imagesavealpha ( $resource , true ); imagepng ( $resource , null );","title":"Render images in-memory"},{"location":"examples/render-images-in-memory/#render-images-in-memory","text":"The following example renders an image in-memory and return the string resource. <?php use GImage\\Image ; $img = new Image (); $arch_url = 'https://i.imgur.com/G5MR088.png' ; $resource = $img -> load ( $arch_url ) // Scale 120% -> scale ( 1.2 ) // Rotate an image to -90\u00ba -> rotate ( - 90 ) // Change to PNG -> toPNG () // Add opacity 70% -> setOpacity ( 0.7 ) // Render the image in-memory -> render (); // Output the resource (example only) header ( 'Content-Type: image/png' ); // Necessary for opacity to work imagesavealpha ( $resource , true ); imagepng ( $resource , null );","title":"Render images in-memory"},{"location":"examples/resizing/","text":"Resizing \u00b6 Width resizing \u00b6 Resizing an image proportionally based on the width ( height is calculated). <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Resize from width -> resizeToWidth ( 200 ) // Save on local -> save ( 'resize_width_image.png' ); Height resizing \u00b6 Resizing an image proportionally based on the height ( width is calculated). <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Resize from height -> resizeToHeight ( 80 ) // Save on local -> save ( 'resize_height_image.png' ); Tip Use getPropWidth(height) and getPropHeight(width) to get the proportional width or height values only. Scale \u00b6 The following example scales a PNG image to 120%. Tip The scale(val) function value should be between 0 and 1 <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Scale 120% -> scale ( 1.2 ) // Save on local -> save ( 'rotate_image.png' );","title":"Resizing"},{"location":"examples/resizing/#resizing","text":"","title":"Resizing"},{"location":"examples/resizing/#width-resizing","text":"Resizing an image proportionally based on the width ( height is calculated). <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Resize from width -> resizeToWidth ( 200 ) // Save on local -> save ( 'resize_width_image.png' );","title":"Width resizing"},{"location":"examples/resizing/#height-resizing","text":"Resizing an image proportionally based on the height ( width is calculated). <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Resize from height -> resizeToHeight ( 80 ) // Save on local -> save ( 'resize_height_image.png' ); Tip Use getPropWidth(height) and getPropHeight(width) to get the proportional width or height values only.","title":"Height resizing"},{"location":"examples/resizing/#scale","text":"The following example scales a PNG image to 120%. Tip The scale(val) function value should be between 0 and 1 <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Scale 120% -> scale ( 1.2 ) // Save on local -> save ( 'rotate_image.png' );","title":"Scale"},{"location":"examples/rotation/","text":"Rotation \u00b6 The following example rotates a PNG image 90\u00b0. <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Rotate 90\u00b0 -> rotate ( 90 ) // Save on local -> save ( 'rotate_image.png' );","title":"Rotation"},{"location":"examples/rotation/#rotation","text":"The following example rotates a PNG image 90\u00b0. <?php use GImage\\Image ; $image = new Image (); $image -> load ( 'https://i.imgur.com/G5MR088.png' ) // Rotate 90\u00b0 -> rotate ( 90 ) // Save on local -> save ( 'rotate_image.png' );","title":"Rotation"},{"location":"examples/swapping-formats/","text":"Swapping formats \u00b6 It's possible to swapping image formats. The following example loads a PNG image and save it as JPG. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) -> crop ( 20 , 20 ) -> toJPG () -> save ( 'arch.jpg' ); Or output it on browser: <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) -> scale ( 0.5 ) -> toJPG () -> output ();","title":"Swapping formats"},{"location":"examples/swapping-formats/#swapping-formats","text":"It's possible to swapping image formats. The following example loads a PNG image and save it as JPG. <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) -> crop ( 20 , 20 ) -> toJPG () -> save ( 'arch.jpg' ); Or output it on browser: <?php use GImage\\Image ; // PNG image (600x199) $arch_url = 'https://i.imgur.com/G5MR088.png' ; $arch_img = new Image (); $arch_img -> load ( $arch_url ) -> scale ( 0.5 ) -> toJPG () -> output ();","title":"Swapping formats"},{"location":"examples/text-embedding/","text":"Text embedding \u00b6 GImage supports text embedding with custom TTF fonts using Text class and Canvas . Tip Use setAlign(str) , setValign(str) functions for control the aligment, setLineHeight(n) for line spaces or setLeft(x) and setTop(y) for position on canvas. <?php use GImage\\Text ; use GImage\\Figure ; use GImage\\Canvas ; // figure layout used as canvas $figure = new Figure ( 400 , 250 ); $figure -> setBackgroundColor ( 47 , 42 , 39 ) -> create (); // text definition $text = new Text ( 'My Text with opacity!' ); $text // box area size for text -> setWidth ( 400 ) -> setHeight ( 250 ) // aligments -> setAlign ( 'center' ) // \"none\" by default -> setValign ( 'center' ) // \"none\" by default // line height -> setLineHeight ( 1.2 ) // font size -> setSize ( 22 ) // font color -> setColor ( 255 , 255 , 255 ) // font face -> setFontface ( '/my/path/fonts/Lato.ttf' ); -> setOpacity ( 0.5 ) // canvas definition $canvas = new Canvas ( $figure ); $canvas // append the text element -> append ( $text ) -> toPNG () -> draw () -> save ( 'text.png' );","title":"Text embedding"},{"location":"examples/text-embedding/#text-embedding","text":"GImage supports text embedding with custom TTF fonts using Text class and Canvas . Tip Use setAlign(str) , setValign(str) functions for control the aligment, setLineHeight(n) for line spaces or setLeft(x) and setTop(y) for position on canvas. <?php use GImage\\Text ; use GImage\\Figure ; use GImage\\Canvas ; // figure layout used as canvas $figure = new Figure ( 400 , 250 ); $figure -> setBackgroundColor ( 47 , 42 , 39 ) -> create (); // text definition $text = new Text ( 'My Text with opacity!' ); $text // box area size for text -> setWidth ( 400 ) -> setHeight ( 250 ) // aligments -> setAlign ( 'center' ) // \"none\" by default -> setValign ( 'center' ) // \"none\" by default // line height -> setLineHeight ( 1.2 ) // font size -> setSize ( 22 ) // font color -> setColor ( 255 , 255 , 255 ) // font face -> setFontface ( '/my/path/fonts/Lato.ttf' ); -> setOpacity ( 0.5 ) // canvas definition $canvas = new Canvas ( $figure ); $canvas // append the text element -> append ( $text ) -> toPNG () -> draw () -> save ( 'text.png' );","title":"Text embedding"}]}